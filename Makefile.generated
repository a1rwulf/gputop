data_dir = $(top_srcdir)/gputop-data
script_dir = $(top_srcdir)/scripts

oa_xml_files = \
	oa-hsw.xml \
	oa-bdw.xml \
	oa-chv.xml \
	oa-sklgt2.xml \
	oa-sklgt3.xml \
	oa-sklgt4.xml \
	oa-bxt.xml \
	oa-kblgt2.xml \
	oa-kblgt3.xml \
	oa-glk.xml \
	oa-cflgt2.xml \
	oa-cflgt3.xml \
	oa-cnl.xml

gputop_xml_files = $(oa_xml_files:oa-%.xml=gputop-%.xml)

oa_generated_sources = \
	oa-hsw.c \
	oa-hsw.h \
	oa-bdw.h \
	oa-bdw.c \
	oa-chv.h \
	oa-chv.c \
	oa-sklgt2.h \
	oa-sklgt2.c \
	oa-sklgt3.h \
	oa-sklgt3.c \
	oa-sklgt4.h \
	oa-sklgt4.c \
	oa-bxt.h \
	oa-bxt.c \
	oa-kblgt2.h \
	oa-kblgt2.c \
	oa-kblgt3.h \
	oa-kblgt3.c \
	oa-glk.h \
	oa-glk.c \
	oa-cflgt2.h \
	oa-cflgt2.c \
	oa-cflgt3.h \
	oa-cflgt3.c \
	oa-cnl.h \
	oa-cnl.c

OA_GEN = $(AM_V_GEN)

# Note: we avoid using a multi target rule here and outputting both the
# .c and .h files in one go so we don't hit problems with parallel
# make and multiple invocations of the same script trying to write
# to the same files.
oa-%.h: $(data_dir)/oa-%.xml $(script_dir)/gputop-oa-codegen.py Makefile.am
	$(OA_GEN) $(PYTHON2) $(PYTHON_FLAGS) $(script_dir)/gputop-oa-codegen.py \
	    --header=$(builddir)/oa-$(*).h \
	    --chipset="$(*)" $(data_dir)/oa-$(*).xml
oa-%.c: $(data_dir)/oa-%.xml $(script_dir)/gputop-oa-codegen.py Makefile.am
	$(OA_GEN) $(PYTHON2) $(PYTHON_FLAGS) $(script_dir)/gputop-oa-codegen.py \
	    --code=$(builddir)/oa-$(*).c \
	    --chipset="$(*)" $(data_dir)/oa-$(*).xml
